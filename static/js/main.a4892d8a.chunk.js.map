{"version":3,"sources":["components/func/saveToGoogleSheets.js","components/Login.js","App.js","reportWebVitals.js","index.js"],"names":["credentials","process","doc","GoogleSpreadsheet","require","spreadsheetId","getLocalDate","currentDate","Date","setUTCHours","getUTCHours","hours","getHours","toString","padStart","minutes","getMinutes","day","getDate","month","getMonth","year","getFullYear","slice","concat","_saveToGoogleSheets","_asyncToGenerator","_regeneratorRuntime","mark","_callee","email","sheet","row","wrap","_context","prev","next","useServiceAccountAuth","client_email","private_key","key","loadInfo","sheetsByIndex","Email","DateISO","addRow","t0","console","log","message","stop","apply","arguments","saveToGoogleSheets","_x","Login","_jsx","className","children","GoogleLogin","clientId","buttonText","onSuccess","googleResponse","profileObj","onFailure","cookiePolicy","App","_jsxs","onClick","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"0cAAIA,EAAc,CAClBA,MAAoBC,2DACpBD,IAAkBC,usDAClBD,cAA4BC,gDAQtBC,EAAM,IAAIC,EAHcC,EAAQ,KAA9BD,mBAG0BH,EAAYK,eAE9C,SAASC,IAEP,IAAMC,EAAc,IAAIC,KAGxBD,EAAYE,YAAYF,EAAYG,eAKpC,IAAMC,EAAQJ,EAAYK,WAAWC,WAAWC,SAAS,EAAG,KACtDC,EAAUR,EAAYS,aAAaH,WAAWC,SAAS,EAAG,KAC1DG,EAAMV,EAAYW,UAAUL,WAAWC,SAAS,EAAG,KACnDK,GAASZ,EAAYa,WAAa,GAAGP,WAAWC,SAAS,EAAG,KAC5DO,EAAOd,EAAYe,cAAcT,WAAWU,OAAO,GAGzD,MADmB,GAAAC,OAAMb,EAAK,KAAAa,OAAIT,EAAO,KAAAS,OAAIP,EAAG,KAAAO,OAAIL,EAAK,KAAAK,OAAIH,EAG/D,CAEiC,SAAAI,IAkBhC,OAlBgCA,EAAAC,YAAAC,cAAAC,MAAjC,SAAAC,EAAkCC,GAAK,IAAAC,EAAAC,EAAA,OAAAL,cAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAE7BlC,EAAImC,sBAAsB,CAC5BC,aAActC,EAAY8B,MAC1BS,YAAavC,EAAYwC,MAC1B,KAAD,SAAAN,EAAAE,KAAA,EAEIlC,EAAIuC,WAAW,KAAD,EAIgC,OAF9CV,EAAQ7B,EAAIwC,cAAc,GAE1BV,EAAM,CAAEW,MAAOb,EAAOc,QAAStC,KAAe4B,EAAAE,KAAA,EAE9CL,EAAMc,OAAOb,GAAK,KAAD,EAAAE,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAY,GAAAZ,EAAA,SAErBa,QAAQC,IAAI,wBACZD,QAAQC,IAAId,EAAAY,GAAEG,SAAQ,yBAAAf,EAAAgB,OAAA,GAAArB,EAAA,oBAE3BsB,MAAA,KAAAC,UAAA,CAEcC,MAtBd,SAEgCC,GAAA,OAAA7B,EAAA0B,MAAC,KAADC,UAAA,E,QCVlBG,MApBf,WAME,OACEC,cAAA,OAAKC,UAAU,cAAaC,SACxBF,cAACG,IAAW,CACZC,SAAS,2EACTC,WAAW,QACXC,UATJ,SAAiBC,GACbhB,QAAQC,IAAIe,GACZV,EAAmBU,EAAeC,WAAWlC,MACjD,EAOImC,UAAWlB,QAAQC,IACnBkB,aAAc,wBAKtB,ECTeC,MATf,WACE,OACEC,eAAA,OAAKX,UAAU,MAAKC,SAAA,CAClBF,cAACD,EAAK,IACNC,cAAA,UAAQa,QAAS,kBAAIhB,EAAmB,SAAS,EAACK,SAAC,aAGzD,ECCeY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,SAAAC,GAAkD,IAA/CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EACV,GAEJ,ECJaS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH5B,cAAC6B,IAAMC,WAAU,CAAA5B,SACfF,cAACW,EAAG,OAORG,G","file":"static/js/main.a4892d8a.chunk.js","sourcesContent":["var credentials = {}\ncredentials.email = process.env.REACT_APP_GOOGLE_EMAIL;\ncredentials.key = process.env.REACT_APP_GOOGLE_KEY;\ncredentials.spreadsheetId = process.env.REACT_APP_GOOGLE_SHEET;\n//console.log(process.env);\n//console.log(credentials.key);\n//console.log(process.env.REACT_APP_GOOGLE_KEY);\n\nconst { GoogleSpreadsheet } = require('google-spreadsheet');\n\n// Google Sheets Document ID -- PROD\nconst doc = new GoogleSpreadsheet(credentials.spreadsheetId);\n\nfunction getLocalDate(){\n  // Create a new Date object\n  const currentDate = new Date();\n\n  // Adjust the time zone offset to GMT+3 (EEST)\n  currentDate.setUTCHours(currentDate.getUTCHours());\n\n  // Format the date as a string in ISO format\n  //const isoDateGMTPlus3 = currentDate.toISOString();\n\n  const hours = currentDate.getHours().toString().padStart(2, '0');\n  const minutes = currentDate.getMinutes().toString().padStart(2, '0');\n  const day = currentDate.getDate().toString().padStart(2, '0');\n  const month = (currentDate.getMonth() + 1).toString().padStart(2, '0'); // Months are 0-based\n  const year = currentDate.getFullYear().toString().slice(-2);\n\n  const formattedDate = `${hours}:${minutes} ${day}/${month}/${year}`;\n  return formattedDate;\n\n}\n\nasync function saveToGoogleSheets(email) {\n  try{\n    await doc.useServiceAccountAuth({\n        client_email: credentials.email,\n        private_key: credentials.key,\n    });\n\n    await doc.loadInfo(); // Loads document properties and worksheets\n\n    const sheet = doc.sheetsByIndex[0];\n    \n    const row = { Email: email, DateISO: getLocalDate()};\n    \n    await sheet.addRow(row);\n  }catch(e){\n      console.log(\"erro inserindo sheet\");\n      console.log(e.message)\n  }\n}\n\nexport default saveToGoogleSheets;\n","import GoogleLogin from  \"@stack-pulse/next-google-login\"\n\nimport saveToGoogleSheets from './func/saveToGoogleSheets'\n\nfunction Login() {\n\n    function onLogin(googleResponse){\n        console.log(googleResponse);\n        saveToGoogleSheets(googleResponse.profileObj.email);\n    }\n  return (\n    <div className=\"GoogleLogin\">\n        <GoogleLogin\n        clientId=\"796862051841-uf2qae34ci7rhqihf9smh6omhn1jjvic.apps.googleusercontent.com\"\n        buttonText=\"Login\"\n        onSuccess={onLogin}\n        onFailure={console.log}\n        cookiePolicy={'single_host_origin'}\n        />\n        \n    </div>\n  );\n}\n\nexport default Login;\n","import './App.css';\n\nimport Login from './components/Login';\nimport saveToGoogleSheets from './components/func/saveToGoogleSheets';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Login/>\n      <button onClick={()=>saveToGoogleSheets(\"teste2\")}>TESTE2</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}